--mugen.lifereset()
--print('I just reset life ' .. mugen.camerapos() .. '\n')
--v = mugen.camerapos()
--print(tostring(v) .. '\n')

if not mugen.isinit then
  print("MUGEN didn't init properly\n")
end

p1 = player.getplayer(1)
p2 = player.getplayer(2)
i1 = player.getinterface(1)
i2 = player.getinterface(2)
--print(tostring(p2) .. "'s life is " .. p2:life() .. '\n')
--p1:setlife(p2:life())
print('Ready\n')

-- Print all player constants
function printconst(p)
  local c = function(s)
    print (s .. ' = ' .. tostring(p.const(s)) .. '\n')
  end
  c("data.life")
  c("data.power")
  c("data.attack")
  c("size.attack.z.width.front")
  c("size.attack.z.width.back")
  c("data.airjuggle")
  c("size.attack.dist")
  c("size.proj.attack.dist")
  -- | Defence |-----------------------------
  c("data.defence")
  c("data.fall.defence_mul") --(100/x)
  c("data.liedown.time")
  -- | Size |--------------------------------
  c("size.xscale")
  c("size.yscale")
  c("size.ground.back")
  c("size.ground.front")
  c("size.air.back")
  c("size.air.front")
--  c("size.z.width")
  c("size.height")
  c("size.proj.doscale")
  c("size.head.pos.x")
  c("size.head.pos.y")
  c("size.mid.pos.x")
  c("size.mid.pos.y")
  c("size.shadowoffset")
  -- | Walking |-----------------------------
  c("velocity.walk.fwd.x")
  c("velocity.walk.back.x")
  c("velocity.walk.up.x")
  c("velocity.walk.down.x")
  -- | Running/hopping: |--------------------
  c("velocity.run.fwd.x")
  c("velocity.run.fwd.y")
  c("velocity.run.back.x")
  c("velocity.run.back.y")
  c("velocity.run.down.x")
  c("velocity.run.down.y")
  c("velocity.run.up.x")
  c("velocity.run.up.y")
  -- | Normal jump |-------------------------
  c("velocity.jump.y")
  c("velocity.jump.neu.x")
  c("velocity.jump.fwd.x")
  c("velocity.jump.back.x")
  c("velocity.jump.up.x")
  c("velocity.jump.down.x")
  -- | Running jump |------------------------
  c("velocity.runjump.y")
  c("velocity.runjump.fwd.x")
  c("velocity.runjump.back.x")
  c("velocity.runjump.up.x")
  c("velocity.runjump.down.x")
  -- | Air jump |----------------------------
  c("movement.airjump.num")
  c("movement.airjump.height")
  c("velocity.airjump.y")
  c("velocity.airjump.neu.x")
  c("velocity.airjump.fwd.x")
  c("velocity.airjump.back.x")
  c("velocity.airjump.up.x")
  c("velocity.airjump.down.x")
  -- | Other constants |---------------------
  c("movement.yaccel")
  c("movement.stand.friction")
  c("movement.crouch.friction")
  c("data.sparkno")
  c("data.guard.sparkno")
  c("data.ko.echo")
  c("size.draw.offset.x")
  c("size.draw.offset.y")
  c("data.intpersistindex")
  c("data.floatpersistindex")
  -- | New in 1.0 |--------------------------
  c("velocity.air.gethit.groundrecover.x")
  c("velocity.air.gethit.groundrecover.y")
  c("velocity.air.gethit.airrecover.mul.x")
  c("velocity.air.gethit.airrecover.mul.y")
  c("velocity.air.gethit.airrecover.add.x")
  c("velocity.air.gethit.airrecover.add.y")
  c("velocity.air.gethit.airrecover.back")
  c("velocity.air.gethit.airrecover.fwd")
  c("velocity.air.gethit.airrecover.up")
  c("velocity.air.gethit.airrecover.down")
  c("movement.stand.friction.threshold")
  c("movement.crouch.friction.threshold")
  --"movement.jump.changeanim.threshold")
  c("movement.air.gethit.groundlevel")
  --"movement.air.gethit.changeanim.5050.threshold")
  --"movement.air.gethit.changeanim.other.threshold")
  c("movement.air.gethit.groundrecover.ground.threshold")
  c("movement.air.gethit.groundrecover.groundlevel")
  --"movement.air.gethit.groundrecover.turn.threshold")
  c("movement.air.gethit.airrecover.threshold")
  --"movement.air.gethit.airrecover.turn.threshold")
  c("movement.air.gethit.airrecover.yaccel")
  c("movement.air.gethit.trip.groundlevel")
  c("movement.down.bounce.offset.x")
  c("movement.down.bounce.offset.y")
  c("movement.down.bounce.yaccel")
  c("movement.down.bounce.groundlevel")
  c("movement.down.friction.threshold")
end

--printconst(i1)
--print(tostring(i1.const("velocity.jump.fwd")) .. '\n')
--print(tostring(i1.const("size.proj.attack.dist")) .. '\n')

--for i in player.interface_iter() do
--  print("player " .. tostring(i) .. '\n')
--end

i1.velset{x=10,y=-9}
i2.velset{}

print("Done\n")
